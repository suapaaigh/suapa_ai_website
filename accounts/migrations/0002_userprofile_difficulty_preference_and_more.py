# Generated by Django 5.2.6 on 2025-09-28 07:12

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
        ('companion', '0002_knowledgearea_subjectcontent_userlearningprogress'),
    ]

    operations = [
        migrations.AddField(
            model_name='userprofile',
            name='difficulty_preference',
            field=models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('mixed', 'Mixed Levels')], default='beginner', max_length=20),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='education_level',
            field=models.CharField(blank=True, choices=[('nursery', 'Nursery'), ('primary', 'Primary'), ('jhs', 'Junior High School'), ('shs', 'Senior High School'), ('tertiary', 'Tertiary'), ('adult', 'Adult Education')], max_length=20),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='grade_level',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)]),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='interests',
            field=models.TextField(blank=True, help_text="Subjects or topics you're interested in"),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='learning_goals',
            field=models.TextField(blank=True, help_text='What do you want to achieve?'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='learning_style',
            field=models.CharField(blank=True, choices=[('visual', 'Visual Learner'), ('auditory', 'Auditory Learner'), ('kinesthetic', 'Kinesthetic Learner'), ('reading', 'Reading/Writing Learner'), ('mixed', 'Mixed Learning Style')], max_length=20),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='onboarding_completed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='preferred_language',
            field=models.CharField(default='english', max_length=50),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='profile_completed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='region',
            field=models.CharField(blank=True, choices=[('greater_accra', 'Greater Accra'), ('ashanti', 'Ashanti'), ('central', 'Central'), ('eastern', 'Eastern'), ('northern', 'Northern'), ('upper_east', 'Upper East'), ('upper_west', 'Upper West'), ('volta', 'Volta'), ('western', 'Western'), ('western_north', 'Western North'), ('bono', 'Bono'), ('bono_east', 'Bono East'), ('ahafo', 'Ahafo'), ('savannah', 'Savannah'), ('north_east', 'North East'), ('oti', 'Oti')], max_length=20),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='school_name',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='study_time_preference',
            field=models.CharField(choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), ('night', 'Night'), ('flexible', 'Flexible')], default='flexible', max_length=20),
        ),
        migrations.CreateModel(
            name='UserEducationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_study_session', models.IntegerField(default=30, help_text='Average study session in minutes')),
                ('preferred_content_types', models.JSONField(default=list, help_text='Preferred types of content (video, text, quiz, etc.)')),
                ('learning_pace', models.CharField(choices=[('slow', 'Slow and Steady'), ('moderate', 'Moderate'), ('fast', 'Fast Learner'), ('adaptive', 'Adaptive')], default='moderate', max_length=20)),
                ('motivation_type', models.CharField(choices=[('achievement', 'Achievement Oriented'), ('competition', 'Competition Driven'), ('collaboration', 'Collaboration Focused'), ('exploration', 'Exploration Driven'), ('goal_oriented', 'Goal Oriented')], default='achievement', max_length=20)),
                ('accessibility_needs', models.JSONField(default=list, help_text='Any accessibility requirements')),
                ('special_considerations', models.TextField(blank=True, help_text='Special learning considerations')),
                ('overall_performance', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('improvement_rate', models.FloatField(default=0.0, help_text='Rate of improvement over time')),
                ('consistency_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('difficulty_adaptation', models.FloatField(default=0.0, help_text='Current difficulty adjustment')),
                ('content_recommendation_weights', models.JSONField(default=dict, help_text='Weights for content recommendation algorithm')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_subjects', models.ManyToManyField(blank=True, related_name='favorite_by_users', to='companion.knowledgearea')),
                ('strong_subjects', models.ManyToManyField(blank=True, related_name='strong_in_users', to='companion.knowledgearea')),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='education_profile', to='accounts.userprofile')),
                ('weak_subjects', models.ManyToManyField(blank=True, related_name='weak_in_users', to='companion.knowledgearea')),
            ],
            options={
                'verbose_name': 'User Education Profile',
                'verbose_name_plural': 'User Education Profiles',
            },
        ),
    ]
